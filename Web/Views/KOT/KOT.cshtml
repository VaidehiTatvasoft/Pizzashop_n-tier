@using Entity.ViewModel
@model KOTViewModel

@{
    Layout = "_OrderAppLayout";
}

<div class="p-3">
    <h2>KOT</h2>
    <div class="bg-white p-2 rounded shadow">
        <ul class="nav d-none d-md-flex" style="gap: 2px;">
            <li class="nav-item">
                <a class="nav-link top-pills active" href="#" data-category-id="all" style="border:none">All</a>
            </li>
            @foreach (var category in Model.Categories)
            {
                <li class="nav-item">
                    <a class="nav-link top-pills" href="#" data-category-id="@category.Id" style="border:none">@category.Name</a>
                </li>
            }
        </ul>
        <div class="dropdown d-md-none">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="categoryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                Categories
            </button>
            <ul class="dropdown-menu" aria-labelledby="categoryDropdown">
                <li><a class="dropdown-item" href="#" data-category-id="all">All</a></li>
                @foreach (var category in Model.Categories)
                {
                    <li><a class="dropdown-item" href="#" data-category-id="@category.Id">@category.Name</a></li>
                }
            </ul>
        </div>
    </div>
    <div class="bg-white mt-2 p-2 rounded shadow">
        <div>
            <div class="d-flex flex-row justify-content-between align-items-center">
                <div class="m-2" id="selected-category-id">
                    <h4 style="color:#0066a6;">All</h4>
                </div>
                <div class="d-flex">
                    <button class="btn update-button m-1 status-filter " data-status="2"><b>In Progress</b></button>
                    <button class="btn cancel-button m-1 status-filter" data-status="3"><b>Ready</b></button>
                    <a class="bg-white border-1 m-1 btn btn-outline-dark scroll" data-direction="left" style="border-color:#0066A7;">
                        <i class="fa fa-less-than"></i>
                    </a>
                    <a class="bg-white border-1 m-1 btn btn-outline-dark scroll" data-direction="right" style="border-color:#0066A7;">
                        <i class="fa fa-greater-than"></i>
                    </a>
                </div>
            </div>
            <div class="orders-container d-flex flex-wrap">
                <!-- Orders will be loaded here -->
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const tabs = document.querySelectorAll('.nav-link.top-pills, .dropdown-item');
    const statusButtons = document.querySelectorAll('.status-filter');
    const scrollButtons = document.querySelectorAll('.scroll');
    const dropdownButton = document.getElementById('categoryDropdown');
    let currentStatus = '2'; 
    let currentCategoryId = 'all';
    let currentOrders = [];
    let currentIndex = 0;
    let itemsPerPage = getItemsPerPage();

    function getItemsPerPage() {
        const width = window.innerWidth;
        if (width >= 1800) {
            return 5;
        } else if (width >= 1440) {
            return 4;
        } else if (width >= 1108) {
            return 3;
        } else if (width >= 768) {
            return 2;
        } else {
            return 1;
        }
    }

    function fetchOrders() {
        let url = new URL('/KOT/GetOrdersPartial', window.location.origin);
        url.searchParams.append('categoryId', currentCategoryId);
        if (currentStatus !== null) {
            url.searchParams.append('status', currentStatus);
        }
        console.log(`Fetching orders from URL: ${url}`);
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(data => {
                document.querySelector('.orders-container').innerHTML = data;
                currentOrders = Array.from(document.querySelectorAll('.kot-card'));
                displayOrders();
            })
            .catch(error => {
                console.error('Error fetching orders:', error);
            });
    }

    function displayOrders() {
        const ordersContainer = document.querySelector('.orders-container');
        ordersContainer.innerHTML = '';
        itemsPerPage = getItemsPerPage();
        const ordersToDisplay = currentOrders.slice(currentIndex, currentIndex + itemsPerPage);
        console.log('Displaying orders:', ordersToDisplay);
        if (ordersToDisplay.length === 0) {
            ordersContainer.innerHTML = '<p>No orders found.</p>';
        } else {
            ordersToDisplay.forEach(order => {
                ordersContainer.appendChild(order);
            });
        }
    }

    tabs.forEach(tab => {
        tab.addEventListener('click', function (e) {
            e.preventDefault();
            tabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');

            const categoryName = this.textContent.trim();
            document.getElementById('selected-category-id').querySelector('h4').textContent = categoryName;

            if (dropdownButton) {
                dropdownButton.textContent = categoryName;
            }

            currentCategoryId = this.getAttribute('data-category-id');
            currentIndex = 0; 
            fetchOrders();
        });
    });

    statusButtons.forEach(button => {
        button.addEventListener('click', function () {
            statusButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');

            currentStatus = this.getAttribute('data-status');
            currentIndex = 0; 
            fetchOrders();
        });
    });

    scrollButtons.forEach(button => {
        button.addEventListener('click', function () {
            const direction = this.getAttribute('data-direction');
            if (direction === 'left' && currentIndex > 0) {
                currentIndex -= 1; 
            } else if (direction === 'right' && currentIndex + itemsPerPage < currentOrders.length) {
                currentIndex += 1; 
            }
            displayOrders();
        });
    });

    window.addEventListener('resize', () => {
        itemsPerPage = getItemsPerPage();
        displayOrders();
    });

    fetchOrders();
});
</script>