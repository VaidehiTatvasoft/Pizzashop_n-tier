@using Entity.Data
@model List<Modifier>

<div class="container-fluid">
    <div class="upper-div d-flex justify-content-end">
        <div class="d-flex justify-content-center align-items-center">
            <div class="search-box" style="margin-right: 13px;">
                <input type="text" name="search" id="searchInput" placeholder="Search"
                    style="height: 50px; width: 250px; border: 1px solid #adadad; border-radius: 5%;">
                <i class="fa-solid fa-magnifying-glass search-btn"></i>
            </div>
            <button id="deleteSelectedButton" style="width: 50px; border: 1px solid #adadad; margin-right: 10px;">
                <i class="fa-solid fa-trash" style="cursor: pointer; color: #adadad;"></i>
            </button>
            <a href="javascript:void(0);" class="edit-btn add-item" style="text-decoration: none; color: inherit;">
                <button data-bs-toggle="modal" data-bs-target="#addModifierModal" class="btn btn-primary"
                    style="border-radius: 5px; margin:5px;">
                    + New Modifier
                </button>
            </a>
        </div>
    </div>

    <!-- Add Modifier Modal -->
    <div class="modal fade" id="addModifierModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content">
                <!-- Content will be loaded here via AJAX -->
            </div>
        </div>
    </div>

    <div class="table table-responsive mt-3">
        <table class="table" id="tbl">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="selectAllCheckbox" style="accent-color: #0066A7 !important;">
                        Name
                    </th>
                    <th>Unit</th>
                    <th>Rate</th>
                    <th>Quantity</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="modifierItemsTableBody">
                @foreach (var item in Model)
                {
                    <tr>
                        <td style="gap: 10px;">
                            <input type="checkbox" class="modifier-checkbox" data-item-id="@item.Id">
                            @item.Name
                        </td>
                        <td>
                            @item.Unit?.ShortName
                        </td>
                        <td>@item.Rate</td>
                        <td>@item.Quantity</td>
                        <td>
                            <a href="javascript:void(0);" class="edit-item" data-id="@item.Id" data-bs-toggle="modal"
                                data-bs-target="#editModifierModal"
                                style="text-decoration: none; color: inherit; opacity: 0.7; cursor: pointer; margin-right: 5px;">
                                <i class="bi-pen bi-pen"></i>
                            </a>
                            <a href="javascript:void(0)" onclick="confirmDeleteItem(@item.Id)"
                                style="text-decoration: none; color: inherit;" class="dlt-btn">
                            <i class="bi bi-trash m-1"></i>
                            </a>
                            <form id="deleteitemform-@item.Id" method="post"
                                action="@Url.Action("DeleteModifier", "Modifier", new { id = @item.Id })"
                                style="display: none;">
                                @Html.AntiForgeryToken()
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Delete Item Modal -->
    <div class="modal fade" id="deleteItemModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Deletion Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex flex-column justify-content-center align-items-center">
                    <img src="@Url.Content("~/assets/warning.png")" alt="" style="height: 40px; width: auto;">
                    Are you sure you want to delete the selected items?
                </div>
                <div class="modal-footer justify-content-center"style="gap: 10px; margin-bottom: 20px;">
                    <button type="button" class="btn" id="confirmDeleteItemsButton"
                        style="height: 40px; width: 80px; background-color: #0066A7; color: white;">Yes</button>
                    <button type="button" class="btn" data-bs-dismiss="modal"
                        style="height: 40px; width: 80px; color: #0066A7; background-color: white; border: 1px solid #0066A7;">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modifier Modal -->
    <div class="modal fade" id="editModifierModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content">
                <!-- Content will be loaded here via AJAX -->
            </div>
        </div>
    </div>
</div>

<script>
    function initializeEventListeners() {
        var selectAllCheckbox = document.getElementById('selectAllCheckbox');
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function () {
                const checkboxes = document.querySelectorAll('.modifier-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                toggleDeleteButton();
            });
        }

        var deleteSelectedButton = document.getElementById('deleteSelectedButton');
        if (deleteSelectedButton) {
            deleteSelectedButton.addEventListener('click', function () {
                const selectedItems = Array.from(document.querySelectorAll('.modifier-checkbox:checked')).map(checkbox => checkbox.dataset.itemId);
                if (selectedItems.length > 0) {
                    const modalElement = document.getElementById('deleteItemModal');
                    const modal = new bootstrap.Modal(modalElement);
                    modal.show();
                } else {
                    alert("No items selected for deletion.");
                }
            });
        }

        var confirmDeleteItemsButton = document.getElementById('confirmDeleteItemsButton');
        if (confirmDeleteItemsButton) {
            confirmDeleteItemsButton.addEventListener('click', function () {
                const selectedItems = Array.from(document.querySelectorAll('.modifier-checkbox:checked')).map(checkbox => checkbox.dataset.itemId);
                if (selectedItems.length > 0) {
                    fetch('@Url.Action("DeleteMultipleModifiers", "Modifier")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(selectedItems)
                    }).then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Network response was not ok.');
                        }
                    }).then(responseData => {
                        if (responseData.success) {
                            location.reload();
                        } else {
                            alert("Failed to delete items: " + responseData.message);
                        }
                    }).catch(error => {
                        console.error('Error:', error);
                        alert("Failed to delete items.");
                    });
                }
            });
        }

        function toggleDeleteButton() {
            var anyChecked = document.querySelectorAll('.modifier-checkbox:checked').length > 0;
            document.getElementById('deleteSelectedButton').disabled = !anyChecked;
        }

        $('#searchInput').on('keyup', function () {
            var value = $(this).val().toLowerCase();
            $('#tbl tbody tr').filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
            });
        });

        $('.modifier-checkbox').change(function () {
            toggleDeleteButton();
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        initializeEventListeners();
        $(document).ready(function () {
            $(document).on('click', '.add-item', function () {
                $.ajax({
                    type: "GET",
                    url: "/modifier/addmodifier",
                    dataType: "html",
                    success: function (data) {
                        console.log("Add modifier modal content loaded");
                        $("#addModifierModal").find('.modal-content').html(data);
                        $('#addModifierModal').modal('show');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading Add Modifier modal content:", status, error);
                        alert("Failed to load Add Modifier modal content.");
                    }
                });
            });

            $(document).on('click', '.edit-item', function () {
                var id = $(this).data('id');
                $.ajax({
                    type: "GET",
                    url: "/modifier/editmodifier/" + id,
                    dataType: "html",
                    success: function (data) {
                        console.log("Edit modifier modal content loaded");
                        $('#editModifierModal .modal-content').html(data);
                        $('#editModifierModal').modal('show');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading Edit Modifier modal content:", status, error);
                        alert("Failed to load Edit Modifier modal content.");
                    }
                });
            });

            $('#editModifierModal').on('hidden.bs.modal', function () {
                $(this).find('.modal-content').html('');
            });

            $('#addModifierModal').on('hidden.bs.modal', function () {
                $(this).find('.modal-content').html('');
            });
        });
    });

    function confirmDeleteItem(itemId) {
        const modalElement = document.getElementById('deleteItemModal');
        const modal = new bootstrap.Modal(modalElement);
        document.getElementById("confirmDeleteItemsButton").onclick = function () {
            document.getElementById(`deleteitemform-${itemId}`).submit();
            modal.hide();
        };

        modal.show();
    }

    $(document).ajaxComplete(function () {
        initializeEventListeners();
    });
</script>