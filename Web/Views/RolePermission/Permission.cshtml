@model List<Entity.ViewModel.RolePermissionViewModel>

@{
    ViewData["Title"] = "Permission";
}
<div class="d-flex justify-content-between align-items-center m-3">
    <div>
        <h2 class="dt p-2">Permissions</h2>
    </div>
    <div>
        <a asp-controller="RolePermission" asp-action="Role" class="btn cancel-button">
            Back</a>
    </div>
</div>

<form asp-action="Permission" asp-controller="RolePermission" method="post">
    <div class="col-md-4">
        <div class="form-floating mb-3">
            <input type="text" class="form-control" id="role" value="@Model.First().RoleName" readonly style="background-color:rgba(235, 235, 235, 0.486);border-color:#209eec" />
            <label for="floatingInput" style="top:-20px;left:-5px;">Role</label>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="selectAll" />
                        Permission
                    </th>
                    <th>Can View</th>
                    <th>Can Add/Edit</th>
                    <th>Can Delete</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Model.Count; i++)
                {
                    <tr>
                        <td>
                            <input type="hidden" asp-for="@Model[i].Id" />
                            <input type="hidden" asp-for="@Model[i].Permissionid" />
                            <input type="hidden" asp-for="@Model[i].RoleId" />
                            <input type="hidden" asp-for="@Model[i].PermissionName" />
                            <input type="hidden" asp-for="@Model[i].RoleName" />

                            <input type="checkbox" class="form-check-input align-items-center permission-checkbox switch-btn mt-0"
                                   name="selectedPermissions" value="@Model[i].Id" data-index="@i"
                                   @(Model[i].CanView || Model[i].CanEdit || Model[i].CanDelete ? "checked" : "") />
                            @Model[i].PermissionName
                        </td>
                        <td>
                            <div class="form-check form-switch mb-0">
                                <input type="checkbox" asp-for="@Model[i].CanView" class="form-check-input align-items-center permission-field can-view"
                                       data-index="@i" value="true" checked="@Model[i].CanView" />
                                <input type="hidden" name="[@i].Canview" value="false" />
                            </div>
                        </td>
                        <td>
                            <div class="form-check form-switch mb-0">
                                <input type="checkbox" asp-for="@Model[i].CanEdit" class="form-check-input align-items-center permission-field can-addedit"
                                       data-index="@i" value="true" checked="@Model[i].CanEdit" />
                                <input type="hidden" name="[@i].Canaddedit" value="false" />
                            </div>
                        </td>
                        <td>
                            <div class="form-check form-switch mb-0">
                                <input type="checkbox" asp-for="@Model[i].CanDelete" class="form-check-input align-items-center permission-field can-delete"
                                       data-index="@i" value="true" checked="@Model[i].CanDelete" />
                                <input type="hidden" name="[@i].Candelete" value="false" />
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-end">
            <button type="submit" class="btn update-button m-1">
                Save
            </button>
            <button type="button" class="btn cancel-button m-1" onclick="window.location.href='@Url.Action("Role", "RolePermission")'">
                Cancel
            </button>
        </div>
    </div>
</form>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const roleId = '@Model.First().RoleId';
            const roleName = '@Model.First().RoleName';
            const permissionCheckboxes = document.querySelectorAll(".permission-checkbox");
            const selectAllCheckbox = document.getElementById("selectAll");

            permissionCheckboxes.forEach(checkbox => {
                togglePermissionFields(checkbox.dataset.index, checkbox.checked);
                checkbox.addEventListener("change", function () {
                    togglePermissionFields(this.dataset.index, this.checked);
                });
            });

            selectAllCheckbox.addEventListener("change", function () {
                const isChecked = this.checked;

                permissionCheckboxes.forEach(chk => {
                    chk.checked = isChecked;
                    togglePermissionFields(chk.dataset.index, isChecked);
                });

                document.querySelectorAll(".can-view, .can-addedit, .can-delete").forEach(chk => {
                    chk.checked = isChecked;
                    chk.disabled = !isChecked;
                });
            });

            function togglePermissionFields(index, isChecked) {
                const canView = document.querySelector(`.can-view[data-index='${index}']`);
                const canAddEdit = document.querySelector(`.can-addedit[data-index='${index}']`);
                const canDelete = document.querySelector(`.can-delete[data-index='${index}']`);
                
                canView.disabled = !isChecked;
                canAddEdit.disabled = !isChecked;
                canDelete.disabled = !isChecked;

                if (!isChecked) {
                    canView.checked = false;
                    canAddEdit.checked = false;
                    canDelete.checked = false;
                }

                canView.addEventListener("change", function () {
                    if (!this.checked) {
                        canAddEdit.checked = false;
                        canDelete.checked = false;
                        canAddEdit.disabled = true;
                        canDelete.disabled = true;
                    } else {
                        canAddEdit.disabled = false;
                        canDelete.disabled = false;
                    }
                });

                canAddEdit.addEventListener("change", function () {
                    if (this.checked && !canView.checked) {
                        this.checked = false;
                        alert("Can Add/Edit requires Can View to be enabled.");
                    }
                });

                canDelete.addEventListener("change", function () {
                    if (this.checked && !canView.checked) {
                        this.checked = false;
                        alert("Can Delete requires Can View to be enabled.");
                    }
                });
            }

            document.querySelectorAll("input[type='checkbox']").forEach(chk => {
                chk.addEventListener("change", function () {
                    let hiddenInput = this.nextElementSibling;
                    if (hiddenInput && hiddenInput.type === "hidden") {
                        hiddenInput.value = this.checked ? "true" : "false";
                    }
                });
            });
        });

        function handleAjaxError(xhr, status, error) {
    if (xhr.status === 401) {
        toastr.error("You are not authenticated. Please log in.");
    } else if (xhr.status === 403) {
        toastr.error(xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : "You are not authorized to perform this action.");
    } else {
        toastr.error("An error occurred while processing your request. Please try again.");
        console.error("Error details:", status, error, xhr.responseText);
    }
}
    </script>
    <script>
        $(document).ready(function () {
            var successUpdate = '@TempData["SuccessUpdate"]';
            var errorUpdate = '@TempData["ErrorUpdate"]';

            if (successUpdate) {
                toastr.success(successUpdate);
            }
            if (errorUpdate) {
                toastr.error(errorUpdate);
            }
        });
    </script>
}